/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== common.cfg ========
 */

var internalMemorySegment;      //Variable to identify internal memory section
var externalMemorySegment;      //Variable to identify external memory section
xdc.global.chipType = Program.platformName;

/* 
 * Set coreId and numCores information in package.bld to be able to treat
 * different cores differently. 
 */
var coreId = Program.build.cfgArgs.coreId;  
var numCores = Program.build.cfgArgs.numCores

/* Set up gt trace defaults */
var Program = xdc.useModule('xdc.cfg.Program');
var chipType = Program.platformName;


var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');

/* Set up to use stdio */
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');;

if (Program.build.target.os == undefined) {

    /* Assume this is a BIOS OS */
    xdc.useModule('ti.sysbios.xdcruntime.Settings');

    /* Name of internal memory in Platform.xdc file */
    externalMemorySegment = Program.platform.dataMemory;

    var extHeapSize = 0x100000;  // Total size to make external heap
    var intHeapSize = 0x2000;   // Size to make internal heap

    if (chipType.match(/6472/)) {
        internalMemorySegment = "LL2RAM";
        //internalMemorySegment = "DDR2"
        externalMemorySegment = "DDR2";
    }
    else if (chipType.match(/6474/)) {
        internalMemorySegment = "DDR2";
        externalMemorySegment = "DDR2";
    }
    else if (chipType.match(/6608|6616|6678|6670/)) {
        internalMemorySegment = "L2SRAM";
        if (chipType.match(/6678|6670/)) {
            externalMemorySegment = "DDR3";
        }
        else {
            externalMemorySegment = "DDR2";
        }
    }
    else { 
        throw ("Unsupported Multicore device " + chipType); 
    }

    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

    /* Configure a couple of heaps */
    var heapMemParams = new HeapMem.Params();
    heapMemParams.size = intHeapSize;
    heapMemParams.sectionName = ".INTMEM_HEAP";
    Program.global.INTMEM_HEAP = HeapMem.create(heapMemParams);
    
    /* Each core has its own internal memory, so no overlap issues */
    Program.sectMap[".INTMEM_HEAP"] = internalMemorySegment;


    /* Create as many external memory heaps as there are cores (for each exe) */
    for (i = 0; i < numCores; i++) { 
        var heapMemParams = new HeapMem.Params();
        heapMemParams.size = (extHeapSize/numCores);
        heapMemParams.sectionName = ".EXTMEM_HEAP" + i;
        Program.global["EXTMEM_HEAP" + i] = HeapMem.create(heapMemParams);
        Program.sectMap[".EXTMEM_HEAP" + i] = externalMemorySegment;
    }

    /* Use only the heap created for your core, for dskt2 ext. memory reqs. */
    var dskt2ExtMemHeapName = "EXTMEM_HEAP" + coreId;
    Program.global["EXTMEM_HEAP"] = Program.global["EXTMEM_HEAP" + coreId];

    Program.sectMap[".text"] = Program.platform.dataMemory;

    /* Configure DSKT2 heaps and scratch */
    DSKT2.ALLOW_EXTERNAL_SCRATCH = false;

    DSKT2.DARAM0 = "INTMEM_HEAP";
    DSKT2.DARAM1 = "INTMEM_HEAP";
    DSKT2.DARAM2 = "INTMEM_HEAP";

    DSKT2.SARAM0 = "INTMEM_HEAP";
    DSKT2.SARAM1 = "INTMEM_HEAP";
    DSKT2.SARAM2 = "INTMEM_HEAP";

    DSKT2.ESDATA = dskt2ExtMemHeapName; 
    DSKT2.IPROG = dskt2ExtMemHeapName;
    DSKT2.EPROG = dskt2ExtMemHeapName;

    DSKT2.DSKT2_HEAP = dskt2ExtMemHeapName;
    DSKT2.DARAM_SCRATCH_SIZES[0] = 1024;
    DSKT2.DARAM_SCRATCH_SIZES[1] = 1024;
    DSKT2.DARAM_SCRATCH_SIZES[2] = 1024;
    DSKT2.DARAM_SCRATCH_SIZES[3] = 1024;


   /* Assume this is a BIOS OS */

    /* ======== Using the Task Module ======== */
    var Task = xdc.useModule('ti.sysbios.knl.Task');

    // Set number of Task priority levels
    Task.numPriorities = 16;
    Task.idleTaskStackSize = 2048;

    // Create a Task Instance and manipulate Instance parameters
    var tskParams = new Task.Params();
    //tskParams.arg0 = 1; // Not using args, but leave here for an example
    //tskParams.arg1 = 2;
    tskParams.priority = 15;
    tskParams.stack = null;
    tskParams.stackSize = 0x800;

    // Add instance of Task running smain().
    task0 = Task.create('&smain', tskParams);
}
else {
    throw ("Unsupported OS " + Program.build.target.os + " on Multicore device "
            + chipType); 
}
/*
 *  @(#) ti.sdo.fc.rman.examples; 1, 0, 0,4; 2-22-2012 18:07:12; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

