/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */


/*
 *  ======== AppTest.cfg ========
 */

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/*
 *  ======== Application Configuration ========
 */

/* application uses the following modules */
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.Memory');
xdc.useModule('xdc.runtime.System');
xdc.useModule('xdc.runtime.knl.Thread');


/*
 *  ======== ti.sdo.tiler configuration ========
 */
var tilerSettings = xdc.useModule('ti.sdo.tiler.Settings');
tilerSettings.tilerDaemonName = "TilerMgr:HOST";
tilerSettings.tilerLib = tilerSettings.TilerLib_Skel;
tilerSettings.tilerManagerOS = tilerSettings.OperSys_Linux;


/*
 *  ======== ti.sdo.rcm configuration ========
 */
var rcmSettings = xdc.useModule('ti.sdo.rcm.Settings');
rcmSettings.ipc = rcmSettings.IpcSupport_ti_syslink_ipc;
xdc.useModule('ti.sdo.rcm.RcmServer');


/*
 *  ======== Operating System Configuration ========
 */

/* on Linux, use SysStd which sends printf to stdout */
var System = xdc.useModule('xdc.runtime.System');
var SysStd = xdc.useModule('xdc.runtime.SysStd')
System.SupportProxy = SysStd;

/* assign Linux delegates to xdc.runtime.knl modules (OSAL) */
xdc.useModule('ti.sdo.xdcruntime.linux.Settings');


/*
 *  ======== Miscellaneous Application Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.RUNTIME_OFF;
Defaults.common$.diags_EXIT      = Diags.RUNTIME_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.RUNTIME_OFF;
Defaults.common$.diags_INTERNAL  = Diags.RUNTIME_ON;  // needed for asserts
Defaults.common$.diags_ASSERT    = Diags.RUNTIME_ON;  // development only
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER2     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER3     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER4     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER5     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER6     = Diags.RUNTIME_OFF;
Defaults.common$.diags_INFO      = Diags.RUNTIME_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.RUNTIME_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.USER1,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO  = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1 = Diags.RUNTIME_OFF;

/* LoggerSys uses System_printf for routing log events */
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var loggerSysP = new LoggerSys.Params();
var appLogger = LoggerSys.create(loggerSysP);
appLogger.instance.name = "AppLog";

var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger = appLogger;

/* assign timestamp proxy to get timestamps in log events */
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
Timestamp.SupportProxy =
    xdc.useModule('ti.sdo.xdcruntime.linux.TimestampPosix');
/*
 *  @(#) ti.sdo.tiler.examples.remote; 1, 0, 0,4; 2-22-2012 18:10:55; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

