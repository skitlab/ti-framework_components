/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */


/*
 *  ======== ComputeDevice.cfg ========
 *
 */


/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* application uses the following modules and packages */
xdc.useModule('xdc.runtime.Assert');
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.IGateProvider');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.Memory');
xdc.useModule('xdc.runtime.Registry');
xdc.useModule('xdc.runtime.knl.GateH');
xdc.useModule('xdc.runtime.knl.SemThread');
xdc.useModule('xdc.runtime.knl.Thread');

xdc.useModule('ti.sdo.utils.List');
xdc.useModule('ti.sysbios.BIOS');
xdc.useModule('ti.sysbios.gates.GateHwi');
xdc.useModule('ti.sysbios.knl.Semaphore');
xdc.useModule('ti.sysbios.knl.Task');

xdc.useModule('ti.sdo.opencl.ComputeDevice');

/* use notrace library if available */
xdc.useModule('ti.sdo.fc.global.Settings').profile = "notrace";

/* load common configuration parameters */
var Common = xdc.loadCapsule("Common.cfg.xs");

/*  ti.sdo.rcm configuration */
var RcmSettings = xdc.useModule('ti.sdo.rcm.Settings');
RcmSettings.ipc = RcmSettings.IpcSupport_ti_sdo_ipc;
RcmSettings.loadStrings = false;
xdc.useModule('ti.sdo.rcm.RcmServer');


/*
 *  ======== RMAN Configuration ========
 */
var ECPY = xdc.useModule('ti.sdo.fc.ecpy.ECPY');
ECPY.persistentAllocFxn = "ComputeDevice_persistentAllocFxn";
ECPY.persistentFreeFxn = "ComputeDevice_persistentFreeFxn";

EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHANLITE');
EDMA3CHAN.baseAddress = 0x400A0000;  /* EDMA_CC base address */
EDMA3CHAN.numLogicalChans = 2;

EDMA3CHAN.logicalChans[0].chan = 1;
EDMA3CHAN.logicalChans[0].numTccs = 1;
EDMA3CHAN.logicalChans[0].tccArray = [1];
EDMA3CHAN.logicalChans[0].numParams = 2;
EDMA3CHAN.logicalChans[0].paramArray = [1, 2];

EDMA3CHAN.logicalChans[1].chan = 2;
EDMA3CHAN.logicalChans[1].numTccs = 1;
EDMA3CHAN.logicalChans[1].tccArray = [2];
EDMA3CHAN.logicalChans[1].numParams = 2;
EDMA3CHAN.logicalChans[1].paramArray = [3, 4];

xdc.useModule('ti.sdo.fc.utils.osal.OsalFactory');

/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap, not all targets support size = 0 */
Program.heap = 0;
Program.argSize = 8;  /* minimum size */
Program.stack = 0x400;  /* 1 KB */
Program.sectMap[".string.log.*"] = new Program.SectionSpec(
    {
        loadSegment: "ARP32"
    });

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x1800;  /* 6 KB */
var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/* configure System module */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 0x100;  /* 256 B */
SysMin.flushAtExit = false;

var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = SysMin;
System.maxAtexitHandlers = 0;  /* reduce data size */

/* assign Bios6 delegates to xdc.runtime.knl modules (OSAL) */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_NonInstrumented;
xdc.useModule('ti.sysbios.xdcruntime.Settings');

var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.idleTaskStackSize = 0x200;  /* 512 B */


/*
 *  ======== Miscellaneous Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.namedModule = false;

Defaults.common$.diags_ENTRY     = Diags.ALWAYS_OFF;
Defaults.common$.diags_EXIT      = Diags.ALWAYS_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.ALWAYS_OFF;
Defaults.common$.diags_INTERNAL  = Diags.ALWAYS_OFF;  // needed for asserts
Defaults.common$.diags_ASSERT    = Diags.ALWAYS_OFF;  // development only
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER2     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER3     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER4     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER5     = Diags.ALWAYS_OFF;
Defaults.common$.diags_USER6     = Diags.ALWAYS_OFF;
Defaults.common$.diags_INFO      = Diags.ALWAYS_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.ALWAYS_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

var Registry = xdc.useModule('xdc.runtime.Registry');
Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
Registry.common$.diags_INFO  = Diags.RUNTIME_OFF;
Registry.common$.diags_USER1 = Diags.RUNTIME_OFF;

/* don't load text strings to save on space */
var Text = xdc.useModule('xdc.runtime.Text');
Text.isLoaded = false;  /* TODO, should be false, Bug# 333522 */
// Text.isLoaded = true;  /* TODO, should be false, Bug# 333522 */

/* LoggerBuf writes log event to LoggerBuf_Instance_entryArr buffer */
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 32;  /* 32 entries = 1 KB of memory */
loggerBufP.bufType = LoggerBuf.BufType_FIXED;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog_Core1";
Defaults.common$.logger = appLogger;
/*
 *  @(#) ti.sdo.opencl.examples.autoviz; 1, 0, 0,4; 2-22-2012 18:09:20; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

