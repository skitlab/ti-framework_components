/* 
 * Copyright (c) 2011, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */


/*
 *  ======== App.cfg ========
 */

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* application uses the following modules and packages */
xdc.useModule('xdc.runtime.Assert');
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.Memory');
xdc.useModule('xdc.runtime.Registry');
xdc.useModule('xdc.runtime.Startup');
xdc.useModule('xdc.runtime.System');
xdc.useModule('xdc.runtime.Timestamp');
xdc.useModule('xdc.runtime.Types');
xdc.useModule('xdc.runtime.knl.GateH');
xdc.useModule('xdc.runtime.knl.GateThread');
xdc.useModule('xdc.runtime.knl.Semaphore');
xdc.useModule('xdc.runtime.knl.SemThread');
xdc.useModule('xdc.runtime.knl.Sync');
xdc.useModule('xdc.runtime.knl.SyncSemThread');
xdc.useModule('xdc.runtime.knl.Thread');

xdc.useModule('ti.sysbios.BIOS');
xdc.useModule('ti.sysbios.gates.GateHwi');
xdc.useModule('ti.sysbios.hal.Cache');
xdc.useModule('ti.sysbios.heaps.HeapBuf');
xdc.useModule('ti.sysbios.knl.Semaphore');
xdc.useModule('ti.sysbios.knl.Task');

xdc.useModule('ti.sdo.ipc.MessageQ');
xdc.useModule('ti.sdo.utils.List');
xdc.useModule('ti.sdo.utils.NameServer');

xdc.useModule('ti.sdo.opencl.OpenCL');
xdc.loadPackage('ti.sdo.opencl.platforms.c6472');


/*
 *  ======== IPC Configuration ========
 */
xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');

/* configure processor names */
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("DSP", ["DSP", "EVE"]);

/* define host processor */
var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');
Ipc.hostProcId = MultiProc.getIdMeta("DSP");

/* plug the ipc attach and detach hook functions */
var userFxn = new Ipc.UserFxn;
userFxn.attach = '&SystemCfg_attachHook';
userFxn.detach = '&SystemCfg_detachHook';
Ipc.addUserFxn(userFxn, null);

/* shared region configuration */
var SharedRegion  = xdc.useModule('ti.sdo.ipc.SharedRegion');

/* configure the SharedRegion_0 (IPC) */
var ipcSharedMem = Program.cpu.memoryMap["IPC_SR0_DSP"];

SharedRegion.setEntryMeta(0,
    new SharedRegion.Entry({
        name:           "IPC_shared_memory",
        base:           ipcSharedMem.base,
        len:            ipcSharedMem.len,
        ownerProcId:    Ipc.hostProcId,
        isValid:        true,
        cacheEnable:    true,
        cacheLineSize:  128
    })
);

/* reduce data memory usage */
var GateMP = xdc.useModule('ti.sdo.ipc.GateMP');
GateMP.RemoteCustom1Proxy = xdc.useModule('ti.sdo.ipc.gates.GateMPSupportNull');

/* use new smaller notify circ driver */
var Notify = xdc.useModule('ti.sdo.ipc.Notify');
Notify.numEvents = 8;
Notify.SetupProxy = xdc.useModule('ti.sdo.ipc.family.eve.NotifyCircSetup');

/* reduce circular buffer size to 16 (one cache line) to save space */
var NotifyDriverCirc =
    xdc.useModule('ti.sdo.ipc.notifyDrivers.NotifyDriverCirc');
NotifyDriverCirc.numMsgs = 16;

var MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');
MessageQ.SetupTransportProxy =
    xdc.useModule('ti.sdo.ipc.transports.TransportShmNotifySetup');


/*
 *  ======== ti.sdo.rcm Configuration ========
 */
var RcmSettings = xdc.useModule('ti.sdo.rcm.Settings');
RcmSettings.ipc = RcmSettings.IpcSupport_ti_sdo_ipc;
xdc.useModule('ti.sdo.rcm.RcmClient');



/*
 *  ======== Operating System Configuration ========
 */

/* configure rts heap */
Program.heap = 0x1000;  /* 8 KB */

/* create a larger default heap (default is only 4 KB and uses HeapStd) */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x40000;  /* 256 KB */
var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/* configure System module */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 0x4000;  /* 16 KB */
SysMin.flushAtExit = false;

var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = SysMin;

/* assign Bios6 delegates to xdc.runtime.knl modules (OSAL) */
xdc.useModule('ti.sysbios.BIOS');
xdc.useModule('ti.sysbios.xdcruntime.Settings');


/*
 *  ======== Miscellaneous Application Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.RUNTIME_OFF;
Defaults.common$.diags_EXIT      = Diags.RUNTIME_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.RUNTIME_OFF;
Defaults.common$.diags_INTERNAL  = Diags.RUNTIME_ON;  // needed for asserts
Defaults.common$.diags_ASSERT    = Diags.RUNTIME_ON;  // development only
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER2     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER3     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER4     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER5     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER6     = Diags.RUNTIME_OFF;
Defaults.common$.diags_INFO      = Diags.RUNTIME_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.RUNTIME_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

/* LoggerBuf writes log event to LoggerBuf_Instance_entryArr buffer */
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
LoggerBuf.enableFlush = true;

var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 128;
loggerBufP.bufType = LoggerBuf.BufType_FIXED;
loggerBufP.exitFlush = true;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog";
Defaults.common$.logger = appLogger;
/*
 *  @(#) ti.sdo.opencl.examples.hello; 1, 0, 0,1; 1-26-2011 22:23:33; /db/atree/library/trees/fc/fc.git/src/ fc-o11
 */

