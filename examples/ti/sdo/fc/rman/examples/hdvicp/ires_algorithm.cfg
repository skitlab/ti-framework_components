/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

// Make chipType global so it can be seen in imported cfg files.
xdc.global.chipType = Program.platformName;

/* Load common XDC config settings */
utils.importFile("../common.cfg");

if (chipType.match(/4430/)) {
    var HDVICP = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP2');
    HDVICP.configureFxn = "_configure";
    HDVICP.waitFxn = "_wait";
    HDVICP.doneFxn = "_done";
}
else {
    var HDVICP = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP');
}

/*
 * Configure the RMAN to be used
 */
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');

if (chipType.match(/DM355|DM360|DM365|PC/)) {
    RMAN.useDSKT2 = false;
    RMAN.persistentAllocFxn = "__ALG_allocMemory" ;
    RMAN.persistentFreeFxn = "__ALG_freeMemory" ;
}
else {
    /* Yield to algorithms of same or higher priority */
    RMAN.yieldSamePriority = true;
}

RMAN.tableSize = 10;

if (chipType.match(/816X/)) {
    RMAN.semCreateFxn  = "_semCreate";
    RMAN.semDeleteFxn  = "_semDelete";
    RMAN.semPendFxn  = "_semPend";
    RMAN.semPostFxn  = "_semPost";
    RMAN.useDSKT2 = true;
    //debug
/*      HDVICP.memoryBaseAddress[0]= 0xFFFFFFFF;*/
}

/* Can this package use the general-purpose ALG interface? */
xdc.loadPackage("ti.sdo.fc.utils.api");

if (Program.build.target.os == undefined) {
    /* Assume this is a BIOS OS */
    xdc.useModule('ti.sysbios.xdcruntime.Settings');
    var sem = xdc.useModule('xdc.runtime.knl.SemThread');
    var gate = xdc.useModule('xdc.runtime.knl.GateThread');
}
else {
//    var osalGlobal = xdc.useModule('ti.sdo.osal.Global');
//    osalGlobal.os = os;
}

/* To enable debug/trace of modules used */

/* Switch to debug profile for all FC modules */
xdc.useModule('ti.sdo.fc.global.Settings').profile = "debug";
/*
 *  @(#) ti.sdo.fc.rman.examples.hdvicp; 1, 0, 0,4; 2-22-2012 18:07:40; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

