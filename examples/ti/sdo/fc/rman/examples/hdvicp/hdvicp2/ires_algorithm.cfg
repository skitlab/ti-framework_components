/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

xdc.global.chipType = Program.platformName;

var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');

/* LOGGING */
var Diags = xdc.useModule('xdc.runtime.Diags');
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var LoggerSysParams = new LoggerSys.Params();

/*
var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger = LoggerSys.create(LoggerSysParams);
*/

/* Set up to use stdio */
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');;

if (Program.build.target.os == undefined) {

    /* Assume this is a BIOS OS */
    xdc.useModule('ti.sysbios.xdcruntime.Settings');

    if (chipType.match(/DA830/)) {
        // The Cache module must have the same configuration as the
        // platform.
        //print("Configuring cache for evmDA830...");
        var Cache = xdc.useModule('ti.sysbios.family.c64p.Cache');
        Cache.initSize.l1dSize = Cache.L1Size_8K;
    }

    /* Name of internal memory in Platform.xdc file */

    var L1DHeapSize = 0x4000;   // Size to make internal heap
    var extHeapSize = 0x10000;   // Size to make external heap

    if (chipType.match(/sdp4430/)) {
        extHeapSize = 0x20000;
    }
    else if (chipType.match(/Tesla|tesla/)) {

        // Make heaps smaller for Tesla
        L1DHeapSize = 0x400;
        extHeapSize = 0x4000;
        DSKT2.cacheWritebackInvalidateFxn = null;
    }

    /* Confugure a couple of heaps */
    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

    var heapMemParams = new HeapMem.Params();
    heapMemParams.size = extHeapSize;
    heapMemParams.sectionName = ".EXTMEM_HEAP";

    Program.global.EXTMEM_HEAP = HeapMem.create(heapMemParams);

    //Program.platform.dataMemory = DDRName;
    Program.sectMap[".text"] = Program.platform.dataMemory;

    // Place heaps. L1DSRAM is defined in platform file.
    Program.sectMap[".EXTMEM_HEAP"] = Program.platform.dataMemory;

    /* Configure DSKT2 heaps and scratch */
    DSKT2.ALLOW_EXTERNAL_SCRATCH = false;

    DSKT2.DARAM0 = "EXTMEM_HEAP";
    DSKT2.DARAM1 = "EXTMEM_HEAP";
    DSKT2.DARAM2 = "EXTMEM_HEAP";

    DSKT2.SARAM0 = "EXTMEM_HEAP";
    DSKT2.SARAM1 = "EXTMEM_HEAP";
    DSKT2.SARAM2 = "EXTMEM_HEAP";

    DSKT2.ESDATA = "EXTMEM_HEAP";
    DSKT2.IPROG = "EXTMEM_HEAP";
    DSKT2.EPROG = "EXTMEM_HEAP";

    DSKT2.DSKT2_HEAP = "EXTMEM_HEAP";
}
else {
    throw ("Only building this test for BIOS");
}



if (Program.build.target.os == undefined) {
    /* Assume this is a BIOS OS */

    /* ======== Using the Task Module ======== */
    var Task = xdc.useModule('ti.sysbios.knl.Task');
    Task.defaultStackHeap = Program.global.EXTMEM_HEAP;

    // Set number of Task priority levels
    Task.numPriorities = 16;
    Task.idleTaskStackSize = 2048;

    // Create a Task Instance and manipulate Instance parameters
    var tskParams = new Task.Params();
    //tskParams.arg0 = 1; // Not using args, but leave here for an example
    //tskParams.arg1 = 2;
    tskParams.priority = 15;
    tskParams.stack = null;
    tskParams.stackSize = 0x8000;

    // Add instance of Task running smain().
    task0 = Task.create('&smain', tskParams);
    tskParams.priority = 5;
/*      task0 = Task.create('&myIdle', tskParams);*/

/* LOGGING */
/*
Task.common$.diags_ENTRY = Diags.RUNTIME_ON;
Task.common$.diags_LIFECYCLE = Diags.RUNTIME_ON;
DSKT2.common$.diags_ENTRY = Diags.RUNTIME_ON;
*/

}


/*
 * Decrease stack size so tests builds
 */
tskParams.stackSize = 0x1000;

print(chipType);
if ((chipType.match(/sdp4430/) || chipType.match(/evmTI816X|evmTI814X/))) {
    var HDVICP = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP2');

    /* These are mock functions provided by the example
       Replace this with actual configurations
    */
    HDVICP.configureFxn = "_configure";
    HDVICP.waitFxn = "_wait";
    HDVICP.doneFxn = "_done";
}
else {
    var HDVICP = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP');
}

/*
 * Configure the RMAN to be used
 */
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');

if (chipType.match(/DM355|DM360|DM365|PC|sdp4430/)) {
    if (chipType.match(/sdp4430/)) {
        RMAN.useDSKT2 = true;
    }
    else {
        RMAN.useDSKT2 = false;
        RMAN.persistentAllocFxn = "__ALG_allocMemory";
        RMAN.persistentFreeFxn = "__ALG_freeMemory";
    }
}
else {
    RMAN.yieldSamePriority = true;
}

RMAN.tableSize = 10;

if (chipType.match(/sdp4430/) || chipType.match(/evmDM8168|simDM8168/)) {
    RMAN.useDSKT2 = true;
    for (i = 0; i < 3; i++) {
        HDVICP.memoryBaseAddress[i]= 0x1000000 + i;
        HDVICP.registerBaseAddress[i]= 0x4000000 + i;
        HDVICP.resetControlAddress[i] = 0x88888888;
    }
}

if (Program.build.target.os == undefined) {
    /* Assume this is a BIOS OS */
    print("Debug, configuring the gate ");
    var sem = xdc.useModule('xdc.runtime.knl.SemThread');
    var gate = xdc.useModule('xdc.runtime.knl.GateThread');
}

var Defaults = xdc.useModule('xdc.runtime.Defaults');

// This line is necessary to get Assert() to work.
Defaults.common$.diags_INTERNAL = Diags.ALWAYS_ON;

// The following code is to enable logging for metaonly modules ///////////
var Main = xdc.useModule('xdc.runtime.Main');                            //
Diags.setMaskMeta("xdc.runtime.Main", Diags.ALL, Diags.RUNTIME_ON);      //
                                                                         //
var Registry = xdc.useModule('xdc.runtime.Registry');                    //
Registry.common$.logger = LoggerSys.create(LoggerSysParams);             //
                                                                         //
Diags.setMaskMeta("xdc.runtime.Registry", Diags.ALL, Diags.RUNTIME_OFF); //
///////////////////////////////////////////////////////////////////////////

//  End of logging setup
//////////////////////////////////////////////////////////////////////////////

/*
 *  @(#) ti.sdo.fc.rman.examples.hdvicp.hdvicp2; 1, 0, 0,4; 2-22-2012 18:07:48; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

