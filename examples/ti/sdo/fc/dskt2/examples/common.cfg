/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== common.cfg ========
 */
xdc.global.chipType = Program.platformName;
utils.importFile("../../examples/buildutils/HeapConfigBios.cfg");

var internalMemorySection;
var externalMemorySection;


/* Set up to use stdio */
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');

var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');

if (Program.build.target.os == undefined) {
    /* Assume this is a BIOS OS */

    if (chipType.match(/DA830/)) {
        // The Cache module must have the same configuration as the
        // platform.
        print("Configuring cache for evmDA830...");
        var Cache = xdc.useModule('ti.sysbios.family.c64p.Cache');
        Cache.initSize.l1dSize = Cache.L1Size_8K;
    }


    internalMemorySection = getInternalHeapName();
    externalMemorySection = getExternalHeapName();

    var intHeapSize = 0x4000;   // Size to make internal heap
    var extHeapSize = 0x8000;   // Size to make external heap
    var memHeapSize = 0x20000;

  Program.global.EXTMEM_HEAP = createHeap(extHeapSize, ".EXTMEM_HEAP", externalMemorySection);
  Program.global.INTMEM_HEAP = createHeap(intHeapSize, ".EXTMEM_HEAP", internalMemorySection);


    /* Create heaps to map IALG memory segments to */
    // Create new heaps to map IALG memory to
    for (i = 0; i < 10; i++) {
        var heapName = "MEM" + i + "_HEAP";
        var sectionName = "." + heapName;
        Program.global[heapName] = createHeap(memHeapSize, sectionName, Program.platform.dataMemory);  
    }

    Program.sectMap[".text"] = Program.platform.dataMemory;
    if (chipType.match(/6472/)) {
        Program.sectMap[".text"] = "DDR2";
    }

    /* Configure DSKT2 heaps and scratch */
    DSKT2.ALLOW_EXTERNAL_SCRATCH = false;

    DSKT2.DARAM0 = "INTMEM_HEAP";
    DSKT2.DARAM1 = "INTMEM_HEAP";
    DSKT2.DARAM2 = "INTMEM_HEAP";

    DSKT2.SARAM0 = "EXTMEM_HEAP";
    DSKT2.SARAM1 = "EXTMEM_HEAP";
    DSKT2.SARAM2 = "EXTMEM_HEAP";

    DSKT2.ESDATA = "EXTMEM_HEAP";
    DSKT2.IPROG = "EXTMEM_HEAP";
    DSKT2.EPROG = "EXTMEM_HEAP";

    DSKT2.DSKT2_HEAP = "EXTMEM_HEAP";
}
else {
    //  The sum of the sizes of all heaps must be less than or equal to the
    //  value of Program.heap.
    Program.heap = 0x20000;

    /* Configure a heap. Create as global so it can be used in C code. */
    var HeapStd = xdc.useModule('xdc.runtime.HeapStd');
    Program.global.EXTMEM_HEAP = HeapStd.create(/* heapStdParams */);
    Program.global.EXTMEM_HEAP.size = 0x8000;

    // Create this heap so programs build.
    Program.global.L1D_HEAP = HeapStd.create(/* heapStdParams */);
    Program.global.L1D_HEAP.size = 0x8000;

    /*
     *  Create a default heap. Don't really need to do this since memory
     *  allocation for HeapStd uses malloc(), but this can be used as an
     *  example.
     */
    var Memory = xdc.useModule('xdc.runtime.Memory');
    Memory.defaultHeapInstance = HeapStd.create({size: 0x10000});

    /* Configure DSKT2 heaps and scratch */
    DSKT2.ALLOW_EXTERNAL_SCRATCH = true;
    DSKT2.cacheWritebackInvalidateFxn = null;

    DSKT2.DARAM0 = null;
    DSKT2.DARAM1 = null;
    DSKT2.DARAM2 = null;

    DSKT2.SARAM0 = null;
    DSKT2.SARAM1 = null;
    DSKT2.SARAM2 = null;

    DSKT2.ESDATA = null;
    DSKT2.IPROG = null;
    DSKT2.EPROG = null;

    DSKT2.DSKT2_HEAP = null; //Memory.defaultHeapInstance;
}


DSKT2.DARAM_SCRATCH_SIZES = [0x2000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
DSKT2.SARAM_SCRATCH_SIZES = [0x2000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

if (Program.build.target.os == undefined) {
    /* Assume this is a BIOS OS */

    /* ======== Using the Task Module ======== */
    var Task = xdc.useModule('ti.sysbios.knl.Task');

    // Set number of Task priority levels
    Task.numPriorities = 16;
    Task.idleTaskStackSize = 2048;

    // Create a Task Instance and manipulate Instance parameters
    var tskParams = new Task.Params();
    //tskParams.arg0 = 1; // Not using args, but leave here for an example
    //tskParams.arg1 = 2;
    tskParams.priority = 15;
    tskParams.stack = null;
    tskParams.stackSize = 0x2000;

    // Add instance of Task running smain().
    task0 = Task.create('&smain', tskParams);

    // Add instance of Task to exit gracefully.
    tskParams.priority = 1; //lowest priority possible, run after the test task
    tskParams.stack = null;
    tskParams.stackSize = 0x100;
    task1 = Task.create('&DSKT2TEST_exit', tskParams);
}
/*
 *  @(#) ti.sdo.fc.dskt2.examples; 1, 0, 0,4; 2-22-2012 18:03:53; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

