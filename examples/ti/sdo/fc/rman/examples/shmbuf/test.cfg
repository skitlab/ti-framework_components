/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

// Make chipType global so it can be seen in imported cfg files.
xdc.global.chipType = Program.platformName;



// Use the linux os.
xdc.useModule('ti.sdo.xdcruntime.linux.Settings');

//  The sum of the sizes of all heaps must be less than or equal to the
//  value of Program.heap.
Program.heap = 0x20000;

/* Confugure a heap. Create as global so it can be used in C code. */
var HeapStd = xdc.useModule('xdc.runtime.HeapStd');
Program.global.EXTMEM_HEAP = HeapStd.create(/* heapStdParams */);
Program.global.EXTMEM_HEAP.size = 0x8000;
    
/*
 *  Create a default heap. Don't really need to do this since memory
 *  allocation for HeapStd uses malloc(), but this can be used as an
 *  example.
 */
var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapStd.create({size: 0x10000});

/* Configure DSKT2 heaps and scratch */
var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');

DSKT2.ALLOW_EXTERNAL_SCRATCH = false;
DSKT2.cacheWritebackInvalidateFxn = null;

    DSKT2.DARAM0 = "EXTMEM_HEAP";
    DSKT2.DARAM1 = "EXTMEM_HEAP";
    DSKT2.DARAM2 = "EXTMEM_HEAP";

    DSKT2.SARAM0 = "EXTMEM_HEAP";
    DSKT2.SARAM1 = "EXTMEM_HEAP";
    DSKT2.SARAM2 = "EXTMEM_HEAP";

    DSKT2.ESDATA = "EXTMEM_HEAP";
    DSKT2.IPROG = "EXTMEM_HEAP";
    DSKT2.EPROG = "EXTMEM_HEAP";

    DSKT2.DSKT2_HEAP = "EXTMEM_HEAP";

/*
 * Configure the RMAN to be used
 */
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');

//RMAN.persistentAllocFxn = "__ALG_allocMemory" ;
//RMAN.persistentFreeFxn = "__ALG_freeMemory" ;
RMAN.persistentAllocFxn = "_DSKT2_allocPersistent" ;
RMAN.persistentFreeFxn = "_DSKT2_freePersistent" ;
RMAN.useDSKT2 = false;
//RMAN.yieldSamePriority = true;
RMAN.tableSize = 10;

var ires = xdc.useModule('ti.sdo.fc.ires.shmbuf.SHMBUF');
ires.bufsize = 0x200;

var globalSettings = xdc.useModule('ti.sdo.fc.global.Settings');
globalSettings.multiProcess = true;
globalSettings.profile = "debug";

xdc.loadPackage('ti.sdo.fc.utils.api');

//////////////////////////////////////////////////////////////////////////////
// Set up logging

/* Set up to use stdio */
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');

var Log = xdc.useModule("xdc.runtime.Log");
var Registry = xdc.useModule("xdc.runtime.Registry");

// Choose the logger that prints thread ID
//var LoggerSys = xdc.useModule('ti.sdo.utils.loggers.LoggerSysTID');
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');

var LoggerSysParams = new LoggerSys.Params();

// Set up the timestamp
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

if (Program.build.target.os == "Linux") {
    // gettimeofday()-based
    Timestamp.SupportProxy =
        xdc.useModule('ti.sdo.xdcruntime.linux.TimestampPosix');
}

var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

var Main = xdc.useModule('xdc.runtime.Main');
Main.common$.logger = LoggerSys.create(LoggerSysParams);


// The following code is to enable logging for metaonly modules ///////////
var Main = xdc.useModule('xdc.runtime.Main');                            //
                                                                         //
var Diags = xdc.useModule('xdc.runtime.Diags');                          //
//Diags.setMaskMeta("xdc.runtime.Main", Diags.ALL, Diags.RUNTIME_ON);    //
                                                                         //  
var Registry = xdc.useModule('xdc.runtime.Registry');                    //
Registry.common$.logger = LoggerSys.create(LoggerSysParams);             //
                                                                         //
// The following line is needed to prevent Assert from crashing          //
Diags.setMaskMeta("xdc.runtime.Registry", Diags.ALL, Diags.RUNTIME_OFF); //
///////////////////////////////////////////////////////////////////////////

//  End of logging setup
//////////////////////////////////////////////////////////////////////////////

/*
 *  @(#) ti.sdo.fc.rman.examples.shmbuf; 1, 0, 0,4; 2-22-2012 18:08:21; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

