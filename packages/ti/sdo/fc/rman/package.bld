/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

/*
 *  ======== package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');

/* lib/ is a generated directory that 'xdc clean' should remove */
Pkg.generatedFiles.$add("lib/");

Pkg.attrs.exportSrc = true;

// check if profile is specified in XDCARGS. 'arguments' is XDCARGS
// eg, XDCARGS="... profile=debug ..."
var cmdProf = (" " + arguments.join(" ") + " ").match(/ profile=([^ ]+) /);
cmdProf = cmdProf != null ? cmdProf[1] : null;

if (cmdProf != null) {
//  print("Building for " + cmdProf + " profile specified on command line...");
}

// list of libraries to build
var libArray = new Array();

var objs = ["rman", "rmancfg", "rman_staticConfig"];
var objsNoYield = ["rman", "rmancfg", "rman_staticConfig"];

Pkg.otherFiles = ["rman.h", "package.bld",
        "simple_GCArmv5T.mak"
];

    // ==== loop over all targets in build array ====
    for (var j = 0; j < Build.targets.length; j++) {
        var targ = Build.targets[j];

        // ==== loop over all profiles ====
        for (var profile in targ.profiles) {
            if (cmdProf != null) {
                // skip profile if different than specified on command line
                if (profile != cmdProf) {
                    continue;
                }
            }

                if (targ.os == undefined) {
                var libName = "rman";
                var defs = " -DUSEDSKT2 "; 
                        var libSources = objs; 
                }
                else {
                var libName = "rmanNoYield";
                        var libSources = objsNoYield;
                var defs = "";
            }           

            // name = lib/profile/name.a+suffix
            var name = "lib/" + profile + "/" + libName;

            var libAttrs = {};

            // must set profile explicitly
            libAttrs.profile = profile;
            libAttrs.defs = defs;

            // build the library
            var library = Pkg.addLibrary(name, targ, libAttrs);

            /* add the source files */
            library.addObjects(libSources);
        }
    }
/*
 *  @(#) ti.sdo.fc.rman; 2, 0, 0,4; 2-22-2012 18:07:11; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

