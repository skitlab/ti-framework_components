/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */


/*
 *  ======== ProgRemote.cfg ========
 *
 */


/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* build arguments for this executable */
var cfgArgs = Program.build.cfgArgs;

/* application uses the following modules */
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.System');
xdc.useModule('xdc.runtime.Timestamp');
xdc.useModule('xdc.runtime.Types');
xdc.useModule('xdc.runtime.knl.SemThread');
xdc.useModule('xdc.runtime.knl.Thread');


/* ti.sdo.tiler configuration */
var TilerSettings = xdc.useModule('ti.sdo.tiler.Settings');
TilerSettings.tilerLib = TilerSettings.TilerLib_Stub;
TilerSettings.tilerDaemonName = "TilerMgr:HOST";
TilerSettings.heapId = 0;

/* ti.sdo.rcm configuration */
var rcmSettings = xdc.useModule('ti.sdo.rcm.Settings');
rcmSettings.ipc = rcmSettings.IpcSupport_ti_sdo_ipc;
xdc.useModule('ti.sdo.rcm.RcmClient');
xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');


/*
 *  ======== IPC configuration ========
 */

xdc.useModule('ti.syslink.ipc.rtos.Syslink');

var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig(cfgArgs.procName, MultiProc.getDeviceProcNames());

var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');
Ipc.hostProcId = MultiProc.getIdMeta(cfgArgs.hostProcName);
Ipc.procSync = Ipc.ProcSync_PAIR;  /* default */

/* configure the shared region */
var ipcSharedMem = Program.cpu.memoryMap[cfgArgs.sr0Name];
var SharedRegion  = xdc.useModule('ti.sdo.ipc.SharedRegion');

SharedRegion.setEntryMeta(0,
    new SharedRegion.Entry({
        name:           "IPC_shared_memory",
        base:           ipcSharedMem.base,
        len:            ipcSharedMem.len,
        ownerProcId:    Ipc.hostProcId,
        isValid:        true
    })
);

/* message queue used by Prog and MemMgr */
var MessageQ = xdc.useModule('ti.sdo.ipc.MessageQ');
MessageQ.numHeaps = 2;


/*
 *  ======== Operating System Configuration ========
 */

/* increase the default program heap size */
Program.heap = 0x40000;  /* 256 KB */

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x40000;  /* 256 KB */
var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

/* configure System module */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
SysMin.bufSize = 0x4000;  /* 16 KB */
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = SysMin;

/* assign Bios6 delegates to xdc.runtime.knl modules (OSAL) */
xdc.useModule('ti.sysbios.BIOS');
xdc.useModule('ti.sysbios.xdcruntime.Settings');

/* required by BIOS on Ducati Subsystem */
var Core = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
Core.id = 0;  /* M3VIDEO */

/* configure ammu (because unicache uses it) and enable the cache */
var AMMU = xdc.useModule('ti.sysbios.hal.ammu.AMMU');

AMMU.largePages[0].pageEnabled = AMMU.Enable_YES;
AMMU.largePages[0].logicalAddress = 0x40000000;
AMMU.largePages[0].translatedAddress = 0x40000000;
AMMU.largePages[0].translationEnabled = AMMU.Enable_YES;
AMMU.largePages[0].size = AMMU.Large_512M;
AMMU.largePages[0].volatileQualifier = AMMU.Volatile_FOLLOW;

AMMU.largePages[1].pageEnabled = AMMU.Enable_YES;
AMMU.largePages[1].logicalAddress = 0x60000000;
AMMU.largePages[1].translatedAddress = 0x60000000;
AMMU.largePages[1].translationEnabled = AMMU.Enable_YES;
AMMU.largePages[1].size = AMMU.Large_512M;
AMMU.largePages[1].volatileQualifier = AMMU.Volatile_FOLLOW;
AMMU.largePages[1].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.largePages[1].L1_posted = AMMU.PostedPolicy_NON_POSTED;

AMMU.largePages[2].pageEnabled = AMMU.Enable_YES;
AMMU.largePages[2].logicalAddress = 0x80000000;
AMMU.largePages[2].translatedAddress = 0x80000000;
AMMU.largePages[2].translationEnabled = AMMU.Enable_YES;
AMMU.largePages[2].size = AMMU.Large_512M;
AMMU.largePages[2].volatileQualifier = AMMU.Volatile_FOLLOW;
AMMU.largePages[2].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
AMMU.largePages[2].L1_posted = AMMU.PostedPolicy_NON_POSTED;

AMMU.largePages[3].pageEnabled = AMMU.Enable_YES;
AMMU.largePages[3].logicalAddress = 0xA0000000;
AMMU.largePages[3].translatedAddress = 0xA0000000;
AMMU.largePages[3].translationEnabled = AMMU.Enable_YES;
AMMU.largePages[3].size = AMMU.Large_512M;
AMMU.largePages[3].volatileQualifier = AMMU.Volatile_FOLLOW;
AMMU.largePages[3].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
AMMU.largePages[3].L1_posted = AMMU.PostedPolicy_NON_POSTED;

var Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
Cache.enableCache = true;


/*
 *  ======== Miscellaneous Application Configuration ========
 */

/* assign application error raise hook function */
var Error = xdc.useModule('xdc.runtime.Error');
Error.raiseHook = "&AppMain_errorHook";

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.RUNTIME_OFF;
Defaults.common$.diags_EXIT      = Diags.RUNTIME_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.RUNTIME_OFF;
Defaults.common$.diags_INTERNAL  = Diags.RUNTIME_ON;  // needed for asserts
Defaults.common$.diags_ASSERT    = Diags.RUNTIME_ON;  // development only
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER2     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER3     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER4     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER5     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER6     = Diags.RUNTIME_OFF;
Defaults.common$.diags_INFO      = Diags.RUNTIME_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.RUNTIME_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.INFO,
    Diags.RUNTIME_ON
);

/* LoggerBuf writes log event to LoggerBuf_Instance_entryArr buffer */
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var loggerBufP = new LoggerBuf.Params();
loggerBufP.numEntries = 0x400;
loggerBufP.bufType = LoggerBuf.BufType_FIXED;

var appLogger = LoggerBuf.create(loggerBufP);
appLogger.instance.name = "AppLog";
Defaults.common$.logger = appLogger;
/*
 *  @(#) ti.sdo.tiler.examples.remote; 1, 0, 0,4; 2-22-2012 18:10:55; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

