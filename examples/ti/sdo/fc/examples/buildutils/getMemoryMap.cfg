/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== getMemoryMap.cfg ========
 *  Common configuration for setting up BIOS 6 configuration.
 */

var myPlatform = Program.platform;
var myPlatformName = Program.platformName;
var myDeviceName = Program.cpu.deviceName;
var myCpuCore = Program.cpu.attrs.cpuCore;
var myCpu = Program.cpu;
var myCpuId = myCpu.id;

var myMemoryMap = myCpu.memoryMap;

function getExternalMemoryDetails() {
    var ExtMemObjs = new Array(); 
    var extMemMap = myPlatform.externalMemoryMap;
    for (i = 0; i < extMemMap.length; i++) {
        var memName = extMemMap[i].name; 
        ExtMemObjs[memName] = extMemMap[i].len;
    }      
    return (ExtMemObjs); 
}

function getInternalMemoryDetails() {
    var IntMemObjs = new Array();
    var ExtMemObjs = getExternalMemoryDetails(); 
    
    //This does print out L1DSRAM but also prints out DDR2 :(
    for (i = 0; i < myMemoryMap.length; i++) {
        if (myMemoryMap[i].name in ExtMemObjs) {
        }
        else {
            var memName  = myMemoryMap[i].name;
            //Not sure if this ARM_RAM mem object is accessible from DSP ?! 
            if (!(memName.match(/ARM_RAM|OCMC/))) {
                IntMemObjs[memName] = myMemoryMap[i].len;
            }
        }
    }      
    
    return (IntMemObjs);
/*
    //This doesn't print out L1DSRAM
    var myCpuDataSheet = myCpu.attrs;
    var memMap = myCpuDataSheet.getMemoryMap();
    for (i = 0; i < memMap.length; i++) {
    }      
    //Doesn't quite work yet :(
    var myDataSheet = myPlatform.getCpuDataSheet(myCpuId); 
    var memmap = myDataSheet.getMemoryMap();
    for (i = 0; i < memmap.length; i++) {
    }      
    
*/
}

function createHeap(size, sectionName, memoryObjArray) {

    var platMemName = null;

    for (i in memoryObjArray) {
        if (memoryObjArray[i] >= size) {
            platMemName = i;
            break;
        }
    } 

    if (platMemName == null) {
        return (null);
    }

    print("Creating heap in " + platMemName); 

    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
    var heapMemParams = new HeapMem.Params();
    heapMemParams.size = size;
    heapMemParams.sectionName = sectionName;
    Program.sectMap[sectionName] = platMemName;
    return HeapMem.create(heapMemParams);
}

/*
 *  @(#) ti.sdo.fc.examples.buildutils; 1, 0, 0,4; 2-22-2012 18:04:42; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

