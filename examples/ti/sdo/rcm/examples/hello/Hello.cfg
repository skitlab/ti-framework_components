/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */


/*
 *  ======== Hello.cfg ========
 */

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

/* build arguments for this executable */
var cfgArgs = Program.build.cfgArgs;


/*
 *  ======== Application Configuration ========
 */

/* application uses the following modules */
xdc.useModule('xdc.runtime.Diags');
xdc.useModule('xdc.runtime.Error');
xdc.useModule('xdc.runtime.Log');
xdc.useModule('xdc.runtime.System');
xdc.useModule('xdc.runtime.knl.Thread');

/* application uses ti.sdo.rcm */
var RcmSettings = xdc.useModule('ti.sdo.rcm.Settings');

if (Program.build.target.os == undefined) {
    RcmSettings.ipc = RcmSettings.IpcSupport_ti_sdo_ipc;
} else {
    RcmSettings.ipc = RcmSettings.IpcSupport_ti_syslink_ipc;
}
xdc.useModule('ti.sdo.rcm.RcmClient');

/* on BIOS, application uses these additional modules */
if (Program.build.target.os == undefined) {
    xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');

    if (Program.cpu.deviceName.match(/TI814X$|TI816X$/)) {
        /* configure the cache */
        var Cache = xdc.useModule('ti.sysbios.family.arm.a8.Cache');
        Cache.enableCache = true;
    }

    /* configure processor names */
    var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
    MultiProc.setConfig(cfgArgs.procName, MultiProc.getDeviceProcNames());

    /* configure ipc */
    var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');
    Ipc.hostProcId = MultiProc.getIdMeta(cfgArgs.procName);
    Ipc.procSync = Ipc.ProcSync_PAIR;  /* default */

    /* default is undefined... */
    Ipc.sr0MemorySetup = true;

    /* configure the shared region */
    var ipcSharedMem = Program.cpu.memoryMap[cfgArgs.sr0Name];
    var SharedRegion  = xdc.useModule('ti.sdo.ipc.SharedRegion');

    SharedRegion.setEntryMeta(0,
        new SharedRegion.Entry({
            name:           "IPC_shared_memory",
            base:           ipcSharedMem.base,
            len:            ipcSharedMem.len,
            ownerProcId:    Ipc.hostProcId,
            isValid:        true
        })
    );
}


/*
 *  ======== Operating System Configuration ========
 */

/* Linux configuration */
if (Program.build.target.os.match(/Linux|Qnx/)) {

    /* on Linux, use SysStd which sends printf to stdout */
    var System = xdc.useModule('xdc.runtime.System');
    var SysStd = xdc.useModule('xdc.runtime.SysStd');
    System.SupportProxy = SysStd;

    /* assign Linux delegates to xdc.runtime.knl modules (OSAL) */
    xdc.useModule('ti.sdo.xdcruntime.linux.Settings');

    /* timestamp used by loggers */
    var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
    Timestamp.SupportProxy =
        xdc.useModule('ti.sdo.xdcruntime.linux.TimestampPosix');
}

/* BIOS configuration */
else if (Program.build.target.os == undefined) {

    /* create a larger default heap (default is only 4 KB and uses HeapStd) */
    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
    var heapMemParams = new HeapMem.Params();
    heapMemParams.size = 0x40000;  /* 256 KB */
    var Memory = xdc.useModule('xdc.runtime.Memory');
    Memory.defaultHeapInstance = HeapMem.create(heapMemParams);

    /* on BIOS, use SysMin which stores printf in buffer */
    var SysMin = xdc.useModule('xdc.runtime.SysMin');
    SysMin.bufSize = 0x4000;  /* 16 KB */
    SysMin.flushAtExit = false;

    var System = xdc.useModule('xdc.runtime.System');
    System.SupportProxy = SysMin;

    /* assign Bios6 delegates to xdc.runtime.knl modules (OSAL) */
    xdc.useModule('ti.sysbios.BIOS');
    xdc.useModule('ti.sysbios.xdcruntime.Settings');
}
else {
    throw Error("unspported operating system: "+Program.build.target.os);
}


/*
 *  ======== Miscellaneous Application Configuration ========
 */

/* set default diags mask */
var Diags = xdc.useModule('xdc.runtime.Diags');
var Defaults = xdc.useModule('xdc.runtime.Defaults');

Defaults.common$.diags_ENTRY     = Diags.RUNTIME_OFF;
Defaults.common$.diags_EXIT      = Diags.RUNTIME_OFF;
Defaults.common$.diags_LIFECYCLE = Diags.RUNTIME_OFF;
Defaults.common$.diags_INTERNAL  = Diags.RUNTIME_ON;  // needed for asserts
Defaults.common$.diags_ASSERT    = Diags.RUNTIME_ON;  // development only
Defaults.common$.diags_STATUS    = Diags.RUNTIME_ON;
Defaults.common$.diags_USER1     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER2     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER3     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER4     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER5     = Diags.RUNTIME_OFF;
Defaults.common$.diags_USER6     = Diags.RUNTIME_OFF;
Defaults.common$.diags_INFO      = Diags.RUNTIME_OFF;
Defaults.common$.diags_ANALYSIS  = Diags.RUNTIME_OFF;

/* override diags mask for selected modules */
xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta(
    "xdc.runtime.Main",
    Diags.ENTRY | Diags.EXIT | Diags.USER1,
    Diags.RUNTIME_ON
);

if (Program.build.target.os == "Linux") {
    /* LoggerSys uses System_printf for routing log events */
    var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
    var loggerSysP = new LoggerSys.Params();
    var appLogger = LoggerSys.create(loggerSysP);
    appLogger.instance.name = "AppLog";

    var Defaults = xdc.useModule('xdc.runtime.Defaults');
    Defaults.common$.logger = appLogger;
}
else if (Program.build.target.os == undefined) {
    /* LoggerBuf writes log event to LoggerBuf_Instance_entryArr buffer */
    var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
    LoggerBuf.enableFlush = true;

    var loggerBufP = new LoggerBuf.Params();
    loggerBufP.numEntries = 0x400;
    loggerBufP.bufType = LoggerBuf.BufType_FIXED;
    loggerBufP.exitFlush = true;

    var appLogger = LoggerBuf.create(loggerBufP);
    appLogger.instance.name = "AppLog";

    var Defaults = xdc.useModule('xdc.runtime.Defaults');
    Defaults.common$.logger = appLogger;
}
/*
 *  @(#) ti.sdo.rcm.examples.hello; 1,0,0,4; 2-22-2012 18:10:13; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

