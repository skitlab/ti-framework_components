/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== bufres_test.cfg ========
 */

// Make chipType global so it can be seen in imported cfg files.
xdc.global.chipType = Program.platformName;

/*
 * Load common XDC config settings
 */
utils.importFile("../common.cfg");

if (Program.build.target.os == undefined) {
    // Add instance of Task myIdle. (tskParams and Task defined in common.cfg)
    tskParams.priority = 1;
    tskParams.stack = null;
    tskParams.stackSize = 0x1000;
    task1 = Task.create('&myIdle', tskParams);

    var Semaphore = xdc.useModule('xdc.runtime.knl.SemThread');
    Semaphore.Proxy = xdc.useModule('ti.sysbios.xdcruntime.SemThreadSupport');
}

/*
 * Configure the RMAN to be used
 */
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');

RMAN.yieldSamePriority = true;
RMAN.tableSize = 10;

if (Program.build.target.os != undefined) {
    // TODO: This seems wierd - we don't use DSKT2, but set the alloc and
    // free functions to DSKT2 functions.
    RMAN.useDSKT2 = false;
    RMAN.persistentAllocFxn = "DSKT2_allocPersistent" ;
    RMAN.persistentFreeFxn = "DSKT2_freePersistent" ;
}



/* Switch to debug profile for all FC modules */
xdc.useModule('ti.sdo.fc.global.Settings').profile = "debug";

var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.namedInstance = true;
//////////////////////////////////////////////////////////////////////////////
//  Set up logging

var Diags = xdc.useModule('xdc.runtime.Diags');

var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');

var LoggerSysParams = new LoggerSys.Params();

Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

/*
 *  We will use Diags_setMask() in main to enable/disable the trace we want
 *  for various modules, but in order for this to work, we have to set each
 *  of the trace levels to RUNTIME_ON or RUNTIME_OFF. For example, if we
 *  removed the line:
 *      Defaults.common$.diags_ENTRY = Diags.RUNTIME_ON;
 *
 *  below, even if we have the code:
 *
 *      Diags_setMask("ti.sdo.fc.%+E");
 *
 *  in main(), we will not see any of the RMAN entry level log statements.
 *
 *  Note: We could set the tracing for each module individually, for example,
 *
 *      RMAN.common$.diags_ENTRY = Diags.RUNTIME_ON;
 *
 *  but the Defaults settings apply to all RTSC modules (including Main),
 *  unless specifically overriden on a per-module basis.
 */
Diags.setMaskMeta('xdc.runtime.Defaults', Diags.ALL, Diags.RUNTIME_OFF);

// Set up the timestamp that will show up in the logs
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

// TODO: Figure out how to set BIOS Timestamp Proxy.
if (Program.build.target.os == "Linux") {
// gettimeofday()-based
Timestamp.SupportProxy =
    xdc.useModule('ti.sdo.xdcruntime.linux.TimestampPosix');
}

// This line is necessary to get Assert() to work.
Defaults.common$.diags_INTERNAL = Diags.ALWAYS_ON;

//  End of logging setup
//////////////////////////////////////////////////////////////////////////////
/*
 *  @(#) ti.sdo.fc.rman.examples.bufres_yield; 1, 0, 0,4; 2-22-2012 18:07:24; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

