/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== common.cfg ========
 */

utils.importFile("log_setup.cfg");

/* Set up to use stdio */
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');

var gtinfra = xdc.useModule("ti.sdo.fc.utils.gtinfra.GTINFRA");
gtinfra.runtimeEnv = gtinfra.NONE;

var gt = xdc.useModule("ti.sdo.utils.trace.GT");
gt.MALLOCFXN = "myMalloc";
gt.PRINTFXN = "printfCaller";

// fcpy has a dependency on ALG
xdc.loadPackage('ti.sdo.fc.utils.api');

// Increase stack size
Program.stack = 0x2000;

// We need to set up Gate and GateMP proxies, since DMAN3 uses a gate.
// TODO: Need to be able to set xdc.runtime.knl.Gate.Proxy to a No OS gate
// so we don't have to set DMAN3's gate directly.
var Gate = xdc.useModule('xdc.runtime.knl.GateThread');
var GateMP = xdc.useModule('xdc.runtime.knl.GateProcess');
var Sem = xdc.useModule('xdc.runtime.knl.SemThread');
var SemMP = xdc.useModule('xdc.runtime.knl.SemProcess');
Gate.Proxy = xdc.useModule('ti.sdo.fc.utils.osal.noOS.GateNull');
GateMP.Proxy = xdc.useModule('ti.sdo.fc.utils.osal.noOS.GateMPNull');
Sem.Proxy = xdc.useModule('ti.sdo.fc.utils.osal.noOS.SemThreadNull');
SemMP.Proxy = xdc.useModule('ti.sdo.fc.utils.osal.noOS.SemProcessNull');

var DSKT2 = xdc.useModule("ti.sdo.fc.dskt2.DSKT2");
/*
 *  @(#) ti.sdo.fc.dman3.examples.fastcopy; 1, 0, 0,4; 2-22-2012 18:03:23; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

