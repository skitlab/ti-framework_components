/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== dmaXferScratch.cfg ========
 */

/*
 * Load common XDC config settings
 */
utils.importFile("../common.cfg");

// Add instance TSK.TSK_myIdle
if (Program.build.target.os == undefined) {

    /* Assume this is a BIOS OS */

    /* ======== Using the Task Module ======== */
    var Task = xdc.useModule('ti.sysbios.knl.Task');
    //Shows how to set priorities and change idle Task size.
    //Task.numPriorities = 16;
    //Task.idleTaskStackSize = 2048;

    // Create a Task Instance and manipulate Instance parameters
    var tskParams = new Task.Params();
    //tskParams.arg0 = 1; // Not using args, but leave here for an example
    //tskParams.arg1 = 2;
    tskParams.priority = 1;
    tskParams.stack = null;
    tskParams.stackSize = 0x200;

    // Add instance of Task running smain().
    Program.global.taskIdle = Task.create('&myIdle', tskParams);

    var Semaphore = xdc.useModule('xdc.runtime.knl.SemThread');

    //Required if your application uses GT style trace
    xdc.useModule("ti.sdo.fc.trace.gt.GT");
    xdc.useModule("ti.sdo.fc.utils.gtinfra.GTINFRA");
}

/*
 * Framework Components' configuration 
 */

//RMAN is used as a top-level (generic) resource manager
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
RMAN.useDSKT2 = true;   //Use DSKT2 for allcating memory for internal data 
                        //structures. Requires DSKT2's heaps to be configured. 
RMAN.yieldSamePriority = true;
                        //When codecs cooperatively yield operation, yield to
                        //same priority algorithms as well.

//ECPY used by codec for EDMA transfers, module must be configured.
var ECPY = xdc.useModule('ti.sdo.fc.ecpy.ECPY');
ECPY.persistentAllocFxn = "DSKT2_allocPersistent";
ECPY.persistentFreeFxn = "DSKT2_freePersistent";
// ECPY.cachedIresMode = true; // now default should be true
// ECPY.cachedIresMode = false;

//EDMA3 resource manager is registered with RMAN by including the below line
var EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');

//If app. is for a DSP device, configure the Settings module for DMA resource
//management. (configures EDMA3LLD-RM) 
var META = xdc.useModule('ti.sdo.fc.edma3.Settings');
META.eventQueueSetup = true;    //Modify global EDMA3 registers to set up 
                                //Event Queues
META.queueTCMap[0] = 3;         //Map Queue #0 to TC #3 
META.queuePriority[0] = 3;      //Set priority of Queue #0 to 3.

//EDMA3LLD-RM is used to manage resources, it is implicitly brought in by EDMA3 
//var EDMA3LLD = xdc.loadPackage('ti.sdo.edma3.rm');
//EDMA3LLD.profile = "debug";   //Use debug version

//Module used to throw debug information that can be used to check transfer 
//status.
//var CHECK = xdc.useModule("ti.sdo.fc.examples.dmaxferchecker.DMAXFERCHECKER");

//Set up maximum number of Params, tccs, edma, qdma channels taht are to be
//assigned to each scratch group.
//Leave as 0, for un-used scratch groups, and if only "Persistent" resources
//are requested by the codec(s). 
if (chipType.match(/6446|3430|3530|2430|DA830/)) {
    META.maxPaRams = [1,6,0,0];
    META.maxTccs = [1,2,0,0];
    META.maxEdmaChannels = [2,2,0,0];
    META.maxQdmaChannels = [0,1,0,0];
    //CHECK.edmaBaseAddr = 0x1C00000;   //Base address is required for this
                                        //module to contribute valuable 
                                        //information
}
else if (chipType.match(/6467/)) {
    META.maxPaRams = [64,64,0,0];
    META.maxTccs = [10,10,0,0];
    META.maxEdmaChannels = [5,5,0,0];
    META.maxQdmaChannels = [1,0,0,0];
    //META.contiguousPaRams = true;
    //CHECK.edmaBaseAddr = 0x1C00000;
}
else if ((chipType.match(/6455/) || chipType.match(/648/))) {
    META.maxPaRams = [64,64,0,0];
    META.maxTccs = [10,10,0,0];
    META.maxEdmaChannels = [5,5,0,0];
    META.maxQdmaChannels = [1,0,0,0];
    //META.contiguousPaRams = true;
    //CHECK.edmaBaseAddr = 0x2A00000;
}
else if ((chipType.match(/6472/)) || (chipType.match(/6474/))) {
    META.maxPaRams = [10,10,0,0];
    META.maxTccs = [4,4,0,0];
    META.maxEdmaChannels = [4,4,0,0];
    META.maxQdmaChannels = [1,0,0,0];
    //CHECK.edmaBaseAddr = 0x2A00000;
}
else {
    throw("Unsupported chipType: " + chipType);
}

/* Switch to debug profile for all FC modules */
xdc.useModule('ti.sdo.fc.global.Settings').profile = "debug";
/*
 *  @(#) ti.sdo.fc.rman.examples.dmaXferScratch; 1, 0, 0,4; 2-22-2012 18:07:47; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

