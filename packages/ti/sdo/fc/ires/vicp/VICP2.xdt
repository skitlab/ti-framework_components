%%{
/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
%%}
 
%%{
    /*
     *  ======== VICP2.xdt ========
     *  Generate VICP2 Resman configuration and initialization structures
     */

    var cfgBase; 
    var device = prog.cpu.deviceName;
    var dm355 = 0;
    var dm365 = 0;

    //print("Program.platformName: " + Program.platformName);

    if (device.match("DM355") != null) {
        cfgBase = 0x1CC0000;
        dm355 = 1;
    }
    else if (device.match("DM365") != null) {
        cfgBase = 0x1CA0000;
        dm365 = 1;
    }
    //else if (device.match(/arm/) != null) {
    //    /* Don't know whether it's DM355 or DM365 */
    //}
    else {
        throw(" VICP2 error: Unrecognized platform " + device + "\n");
    }
%%}


/* Generated code from ti.sdo.fc.ires.vicp.VICP2.xdt */

/* Base key value for VICP2 Linux IPC objects */
UInt32 _VICP2_ipcKeyBase = `utils.toHex(this.ipcKeyBase)`;

% if (device.match(/DM355|DM365/)) {
unsigned int _VICP2_imcopConfigBase = (unsigned int)`cfgBase`; 

Bool _VICP2_dm355 = `dm355`;
Bool _VICP2_dm365 = `dm365`;

% }
% else {
%// Platform name does not match DM355 or DM365 (eg, host.platforms.arm),
%// so app can use preprocessor def, -DDM355 to get DM355 config.
#ifdef DM355

unsigned int _VICP2_imcopConfigBase = (unsigned int)0x1CC0000;

Bool _VICP2_dm355 = 1;
Bool _VICP2_dm365 = 0;

#else

unsigned int _VICP2_imcopConfigBase = (unsigned int)0x1CA0000;

Bool _VICP2_dm355 = 0; 
Bool _VICP2_dm365 = 1; 

#endif    /* DM355 */
% }


%%{
/*
 * @(#) ti.sdo.fc.ires.vicp; 1, 0, 1,4; 2-22-2012 18:06:45; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

%%}
