/* --COPYRIGHT--,BSD
 * Copyright (c) $(CPYYEAR), Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * --/COPYRIGHT--
 */
/*
 *  ======== fastcopytest.cfg ========
 *  Configuration script used to generate BIOS configuration files
 *  for the DM6467 platform
 */

    /* Configure some BIOS heaps */
    var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

    var heapMemParams = new HeapMem.Params();
    heapMemParams.size = 0x2000;
    heapMemParams.sectionName = ".L1D_HEAP";

    /* Create L1DHEAP as global variables so it can be used in C code. */
    Program.global.L1DHEAP = HeapMem.create(heapMemParams);

    heapMemParams.size = 0x8000;
    heapMemParams.sectionName = ".EXTMEM_HEAP";

    Program.global.EXTMEMHEAP = HeapMem.create(heapMemParams);

    heapMemParams.size = 0x8000;
    heapMemParams.sectionName = ".EXTERNAL_HEAP";

    Program.global.EXTERNALHEAP = HeapMem.create(heapMemParams);

    // Place heaps. L1DSRAM is defined in platform file, 2430.xs.
    Program.sectMap[".L1D_HEAP"] = "L1DSRAM";  // L1DHEAP
    Program.sectMap[".EXTMEM_HEAP"] = "IRAM";  // EXTMEMHEAP
    Program.sectMap[".EXTERNAL_HEAP"] = "DDR2"; // EXTERNALHEAP
    Program.sectMap[".text"] = "DDR2";

    /* Need to place this section that is used in fastcopytest.c */
    Program.sectMap[".image"] = "DDR2";

/*
 * Load common XDC config settings
 */
utils.importFile("../common.cfg");

/* Program DSKT2 memory spaces to use the heaps created above */ 
DSKT2.ALLOW_EXTERNAL_SCRATCH = false;
DSKT2.DARAM0 = "L1DHEAP"
DSKT2.DARAM1 = "L1DHEAP"
DSKT2.DARAM2 = "L1DHEAP"
DSKT2.SARAM0 = "L1DHEAP"
DSKT2.SARAM1 = "L1DHEAP"
DSKT2.SARAM2 = "L1DHEAP"
DSKT2.ESDATA = "EXTERNALHEAP"
DSKT2.EPROG = "EXTERNALHEAP";
DSKT2.DSKT2_HEAP = "EXTMEMHEAP";

// Increase stack size even more.
Program.stack = 0x2800;

var DMAN3 = xdc.useModule('ti.sdo.fc.dman3.DMAN3');
var ACPY3 = xdc.useModule('ti.sdo.fc.acpy3.ACPY3');

/* Note new configuration in DMAN3 */
DMAN3.useExternalRM = false;

DMAN3.heapInternal = "L1DHEAP";
DMAN3.heapExternal = "EXTERNALHEAP";

if (DMAN3.useExternalRM == true) {
    var EDMA3 = xdc.useModule("ti.sdo.fc.edma3.Settings");
    EDMA3.semCreateFxn = "mySemCreate";
    EDMA3.semDeleteFxn = "mySemDelete";
    EDMA3.semPendFxn = "mySemPend";
    EDMA3.semPostFxn = "mySemPost";
    EDMA3.persistentAllocFxn = "_ALG_allocMemory";
    EDMA3.persistentFreeFxn = "_ALG_freeMemory";

    var EDMA3LLD = xdc.loadPackage('ti.sdo.edma3.rm');
    EDMA3LLD.profile = "debug";
    EDMA3.maxPaRams = [4,3,2,0,0,5];
    EDMA3.maxTccs = [4,3,2,0,0,5];
    DMAN3.numQdmaChannels = 1;
}
else {
    DMAN3.numQdmaChannels = 8;
    DMAN3.maxTCs = 6;
    DMAN3.paRamBaseIndex = 78;
    DMAN3.numPaRamEntries = 48;
    DMAN3.nullPaRamIndex = 127;
    DMAN3.tccAllocationMaskH = 0xffffffff;
    DMAN3.tccAllocationMaskL = 0x0;
    DMAN3.numTccGroup   = [4, 3, 2, 0, 0, 5];
    DMAN3.numPaRamGroup = [4, 4, 2, 0, 0, 5];
    DMAN3.qdmaChannels = [0, 1, 2, 3, 4, 5, 6, 7];
}

