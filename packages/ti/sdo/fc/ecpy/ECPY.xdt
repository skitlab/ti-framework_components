%%{
/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
%%}
%%{
    /*
     *  ======== ECPY.xdt ========
     *  Generate ECPY configuration and initialization structures
     */
    var ECPY = this.$package.ECPY;
    var allocFxn;
    var freeFxn;

    function su(segName) { /* "strip underscore" */
        return (segName.charAt(0) == "_") ? segName.substr( 1 ) : segName;
    }
%%}
/* C code contribution from ti/sdo/fc/ecpy/ECPY.xdt */

#include <ti/sdo/fc/ecpy/ecpy.h>
#include <ti/xdais/ialg.h>

%   if ((this.persistentAllocFxn != null) && (this.persistentFreeFxn != null)) {

        /* declaration of user-supplied ECPY.persistentAllocFxn */
        extern Bool `su(this.persistentAllocFxn)`(IALG_MemRec *memTab, 
                Int numRecs);
        extern Void `su(this.persistentFreeFxn)`(IALG_MemRec *memTab, 
                Int numRecs);
%       allocFxn = su(this.persistentAllocFxn);
%       freeFxn = su(this.persistentFreeFxn);
%   }
%   else {
%       allocFxn = "NULL";
%       freeFxn = "NULL";
%   }

%   if ((this.scratchAllocFxn != null) && (this.scratchFreeFxn != null)) {

        /* declaration of user-supplied ECPY.scratchAllocFxn */
        extern Bool `su(this.scratchAllocFxn)`(IALG_Handle alg, Int scratchId,
                IALG_MemRec *memTab, Int numRecs);
        extern Void `su(this.scratchFreeFxn)`(Int mutexId, Void *addr, UInt size);
%       scratchAllocFxn = su(this.scratchAllocFxn);
%       scratchFreeFxn = su(this.scratchFreeFxn);
%   }
%   else {
%       scratchAllocFxn = "NULL";
%       scratchFreeFxn = "NULL";
%   }

%   if (this.getScratchIdFxn != null) {

        /* declaration of user-supplied ECPY.getScratchIdFxn */
	extern Int `su(this.getScratchIdFxn)`(IALG_Handle alg);
%       getScratchIdFxn = su(this.getScratchIdFxn);
%   }
%   else {
%       getScratchIdFxn = "NULL";
%   }

/*
 *   ========== ECPY_CFG_PARAMS ===========
 *   Module configuration for ECPY implementation
 *   It is set at design time by system integrator to adjust the behavior of
 *   module to be optimal for its execution environment
 */
ECPY_CfgParams ECPY_CFG_PARAMS = {

    /* persistentAllocFxn */
    `allocFxn`,

    /* persistentFreeFxn */
    `freeFxn`,

    /* scratchAllocFxn */
    `scratchAllocFxn`,

    /* persistentFreeFxn */
    `scratchFreeFxn`,

    /* getScratchIdFxn */
    `getScratchIdFxn` 
};

%%{
/*
 * @(#) ti.sdo.fc.ecpy; 1, 0, 1,4; 2-22-2012 18:04:11; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

%%}
