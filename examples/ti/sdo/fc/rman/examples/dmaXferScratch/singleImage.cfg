/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== dmaXferScratch.cfg ========
 */

/*
 * Load common XDC config settings
 */
utils.importFile("bios.cfg");

// Add instance TSK.TSK_myIdle

/* Assume this is a BIOS OS */

/* ======== Using the Task Module ======== */
var Task = xdc.useModule('ti.sysbios.knl.Task');

// Create a Task Instance and manipulate Instance parameters
var tskParams = new Task.Params();
tskParams.priority = 1;
tskParams.stack = null;
tskParams.stackSize = 0x200;

// Add instance of Task running smain().
Program.global.taskIdle = Task.create('&myIdle', tskParams);

/*
 * Framework Components' configuration 
 */

//RMAN is used as a top-level (generic) resource manager
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
RMAN.useDSKT2 = true;   //Use DSKT2 for allcating memory for internal data 
                        //structures. Requires DSKT2's heaps to be configured. 
RMAN.yieldSamePriority = true;
                        //When codecs cooperatively yield operation, yield to
                        //same priority algorithms as well.

//EDMA3 resource manager is registered with RMAN by including the below line
var EDMA3CHAN = xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');

//If app. is for a DSP device, configure the Settings module for DMA resource
//management. (configures EDMA3LLD-RM) 
var META = xdc.useModule('ti.sdo.fc.edma3.Settings');
META.eventQueueSetup = true;    //Modify global EDMA3 registers to set up 
                                //Event Queues
META.queueTCMap[0] = 3;         //Map Queue #0 to TC #3 
META.queuePriority[0] = 3;      //Set priority of Queue #0 to 3.

//Bring in the codecs that your app will instantiate. 
var CODEC = xdc.useModule('ti.sdo.fc.ires.examples.codecs.universal_dma.UNIVERSAL_DMA');
//CODEC.debug = true;    //Use this to switch on debug information abt DMA xfers
//CODEC.useEcpy = false; //Use this to replace ECPY usage with custom library
                         //for simple DMA 1D Xfer

//EDMA3LLD-RM is used to manage resources, it is implicitly brought in by EDMA3 
//Two lines below are for debug purposes only, for bringing in debug libs from 
//edma3.rm.
//var EDMA3LLD = xdc.loadPackage('ti.sdo.edma3.rm');
//EDMA3LLD.profile = "debug";   //Use debug version

//Set up maximum number of Params, tccs, edma, qdma channels taht are to be
//assigned to each scratch group.
//Leave as 0, for un-used scratch groups, and if only "Persistent" resources
//are requested by the codec(s). 
if (chipType.match(/6472|6474|6678|6670/)) {

    //Need resources only in scratch group # 1
    META.maxPaRams = [0,5,0,0];
    META.maxTccs = [0,1,0,0];
    META.maxEdmaChannels = [0,1,0,0];
    META.maxQdmaChannels = [0,0,0,0];
    //CHECK.edmaBaseAddr = 0x2A00000;
}
else {
    throw("Unsupported chipType: " + chipType);
}

/* Switch to debug profile for all FC modules */
xdc.useModule('ti.sdo.fc.global.Settings').profile = "debug";


/* Switch on logging */
/* Set up to use stdio */
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');

var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');
var LoggerSysParams = new LoggerSys.Params();
 
var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

// Enable logging for metaonly modules
var Main = xdc.useModule('xdc.runtime.Main');
 
var Diags = xdc.useModule('xdc.runtime.Diags');
Diags.setMaskMeta('xdc.runtime.Main', Diags.ALL, Diags.RUNTIME_ON);
 
var Registry = xdc.useModule('xdc.runtime.Registry');
 
// This line is necessary to prevent Linux apps from seg faulting!
Diags.setMaskMeta("xdc.runtime.Registry", Diags.ALL, Diags.RUNTIME_OFF);
var EXCEP = xdc.useModule("ti.sysbios.family.c64p.Exception");
EXCEP.enablePrint = true;
/*
 *  @(#) ti.sdo.fc.rman.examples.dmaXferScratch; 1, 0, 0,4; 2-22-2012 18:07:49; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

