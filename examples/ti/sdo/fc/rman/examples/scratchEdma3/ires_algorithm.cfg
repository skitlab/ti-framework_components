/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

/*
 *  ======== ires_algorithm.cfg ========
 */

/*
 * Load common XDC config settings
 */
utils.importFile("../common.cfg");

/* Required for mock implementation for the ALG interface */
xdc.loadPackage("ti.sdo.fc.utils.api");

//
// You have to set Defaults.common$.namedInstance to true, if you want to
// see the name in the code. If you don't have this, and try to print out
// the name, you will see something like:
//
//  Number of heaps: 2
//  Heap[0] name: {unknown-instance-name}
//  Heap[1] name: {unknown-instance-name}
//
var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.namedInstance = true;

/* Bring in and configure the RMAN Module */
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');
RMAN.useDSKT2 = false;

/*
 * Set a table size that will accommodate all the resource managers (IRESMANs)
 * that will be registered with RMAN
 */
RMAN.tableSize = 10;

RMAN.persistentAllocFxn = "DSKT2_allocPersistent";
RMAN.persistentFreeFxn = "DSKT2_freePersistent";

var EDMA3 = xdc.useModule('ti.sdo.fc.edma3.Settings');

/*
RMAN.persistentAllocFxn = "DSKT2_allocPersistent";
RMAN.persistentFreeFxn = "DSKT2_freePersistent";
*/

EDMA3.semCreateFxn = "mySemCreate";
EDMA3.semDeleteFxn = "mySemDelete";
EDMA3.semPendFxn = "mySemPend";
EDMA3.semPostFxn = "mySemPost";

if (chipType.match(/DM6446|3430|3530|2430/)) {
    EDMA3.maxPaRams = [15,30,0,0];
    EDMA3.maxTccs = [15,13,0,0];
    EDMA3.maxEdmaChannels = [15,13,0,0];
    EDMA3.maxQdmaChannels = [1,0,0,0];
}
else if (chipType.match(/DM6467/)) {
    EDMA3.maxPaRams = [15,30,0,0];
    EDMA3.maxTccs = [15,13,0,0];
    EDMA3.maxEdmaChannels = [13,13,0,0];
    EDMA3.maxQdmaChannels = [1,0,0,0];
    //EDMA3.contiguousPaRams = true;
    EDMA3.regionConfig = "DM6467_config";
}
else if (chipType.match(/6455/) || chipType.match(/648/) ||
        chipType.match(/6472/) || chipType.match(/6474/) || 
        chipType.match(/8148/)) {
    EDMA3.maxPaRams = [64,64,0,0];
    EDMA3.maxTccs = [10,10,0,0];
    EDMA3.maxEdmaChannels = [5,5,0,0];
    EDMA3.maxQdmaChannels = [1,0,0,0];
    //EDMA3.contiguousPaRams = true;
}
else if (chipType.match(/365/) || (chipType.match(/355/)) ||
        (chipType.match(/arm/i))) {
    //EDMA3.contiguousPaRams = true;
}
else {
    throw("Unsupported chipType: " + chipType);
}


xdc.useModule('ti.sdo.fc.ires.edma3chan.EDMA3CHAN');
xdc.useModule("xdcruntime.heaps.HeapStdAlign");

/* Switch to debug profile for all FC modules */
xdc.useModule('ti.sdo.fc.global.Settings').profile = "debug";


/* Switch on trace for some modules specifically */
// Leave these here temporarily to make sure packages will return a default
// library, and not null.
xdc.loadPackage('ti.sdo.fc.rman').profile = "debug_trace";
xdc.loadPackage('ti.sdo.fc.ires.edma3chan').profile = "debug_trace";
//xdc.loadPackage('ti.sdo.fc.ires.edma3chan').profile = "debug";
xdc.loadPackage('ti.sdo.fc.edma3').profile = "debug_trace";


//////////////////////////////////////////////////////////////////////////////
//  Set up logging

var Diags = xdc.useModule('xdc.runtime.Diags');

//var LoggerSys = xdc.useModule('ti.sdo.utils.loggers.LoggerSysTID');
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');

var LoggerSysParams = new LoggerSys.Params();

Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

// Set up the timestamp that will show up in the logs
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

// Set Timestamp Proxy for Linux. BIOS Timestamp Proxy should be set by
// the xdc.useModule('ti.sysbios.xdcruntime.Settings'); in ../common.cfg
if (Program.build.target.os == "Linux") {
    // gettimeofday()-based
    Timestamp.SupportProxy =
        xdc.useModule('ti.sdo.xdcruntime.linux.TimestampPosix');
}

// This line is necessary to get Assert() to work.
Defaults.common$.diags_INTERNAL = Diags.ALWAYS_ON;

// The following code is to enable logging for metaonly modules ///////////
var Main = xdc.useModule('xdc.runtime.Main');                            //
Diags.setMaskMeta("xdc.runtime.Main", Diags.ALL, Diags.RUNTIME_ON);      //
                                                                         //  
var Registry = xdc.useModule('xdc.runtime.Registry');                    //
Registry.common$.logger = LoggerSys.create(LoggerSysParams);             //
                                                                         //
Diags.setMaskMeta("xdc.runtime.Registry", Diags.ALL, Diags.RUNTIME_OFF); //
///////////////////////////////////////////////////////////////////////////

//  End of logging setup
//////////////////////////////////////////////////////////////////////////////

/*
 *  @(#) ti.sdo.fc.rman.examples.scratchEdma3; 1, 0, 0,4; 2-22-2012 18:08:03; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

