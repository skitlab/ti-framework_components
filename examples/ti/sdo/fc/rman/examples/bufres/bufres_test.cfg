/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== bufres_test.cfg ========
 */


utils.importFile("../../../examples/buildutils/HeapConfigBios.cfg");

var internalMemorySection;
var externalMemorySection; 


/* Set up gt trace defaults */
var Program = xdc.useModule('xdc.cfg.Program');
var chipType = Program.platformName;


// Use DSKT2. Need this for allocate and free functions.
var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');

/* Set up to use stdio */
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');

var Log = xdc.useModule("xdc.runtime.Log");
var Registry = xdc.useModule("xdc.runtime.Registry");

// Set up logging
var Diags = xdc.useModule('xdc.runtime.Diags');

// Choose the logger that prints thread ID
//var LoggerSys = xdc.useModule('ti.sdo.utils.loggers.LoggerSysTID');
var LoggerSys = xdc.useModule('xdc.runtime.LoggerSys');

var LoggerSysParams = new LoggerSys.Params();

// Set up the timestamp
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

Program.sysStack = 0x3000;
Program.stack = 0x4000;

if (Program.build.target.os == "Linux") {
    // gettimeofday()-based
    Timestamp.SupportProxy =
        xdc.useModule('ti.sdo.xdcruntime.linux.TimestampPosix');
}

var Defaults = xdc.useModule('xdc.runtime.Defaults');
Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

//var Registry = xdc.useModule("xdc.runtime.Registry");
Registry.common$.logger = LoggerSys.create(LoggerSysParams);
var settings = xdc.useModule('ti.sdo.fc.global.Settings');
settings.profile = "debug";

// Use the BUFRES resource
var bufres = xdc.useModule('ti.sdo.fc.ires.bufres.BUFRES');

if (Program.build.target.os == undefined) {
    /* Assume this is a BIOS OS */
    xdc.useModule('ti.sysbios.xdcruntime.Settings');

    internalMemorySection = getInternalHeapName();
    externalMemorySection = getExternalHeapName();
    var L1DHeapSize = 0x2000;   // Size to make internal heap
    var extHeapSize = 0x10000;   // Size to make external heap

    if (chipType.match(/DA830/)) {
        // The Cache module must have the same configuration as the
        // platform.
        //print("Configuring cache for evmDA830...");
        var Cache = xdc.useModule('ti.sysbios.family.c64p.Cache');
        Cache.initSize.l1dSize = Cache.L1Size_8K;
    }

    Program.global.EXTMEM_HEAP = createHeap(extHeapSize, ".EXTMEM_HEAP", externalMemorySection);
    Program.global.INTMEMHEAP = createHeap(L1DHeapSize, ".INTMEM_HEAP", internalMemorySection);
    Program.sectMap[".text"] = externalMemorySection;
}
else {
    /* Assume this is a Linux OS */
    xdc.useModule('ti.sdo.xdcruntime.linux.Settings');

    //  The sum of the sizes of all heaps must be less than or equal to the
    //  value of Program.heap.
    Program.heap = 0x40000;

    /* Confugure a heap. Create as global so it can be used in C code. */
    var HeapStd = xdc.useModule('xdc.runtime.HeapStd');
    Program.global.EXTMEM_HEAP = HeapStd.create(/* heapStdParams */);
    Program.global.EXTMEM_HEAP.size = 0x8000;

    // Create this heap so programs build.
    Program.global.L1D_HEAP = HeapStd.create({size: 0x8000});

    /*
     *  Create a default heap. Don't really need to do this since memory
     *  allocation for HeapStd uses malloc(), but this can be used as an
     *  example.
     */
    var Memory = xdc.useModule('xdc.runtime.Memory');
    Memory.defaultHeapInstance = Program.global.EXTMEM_HEAP;

    DSKT2.cacheWritebackInvalidateFxn = null;
}

/* Configure DSKT2 heaps and scratch */
DSKT2.ALLOW_EXTERNAL_SCRATCH = false;

DSKT2.DARAM0 = "EXTMEM_HEAP";
DSKT2.DARAM1 = "EXTMEM_HEAP";
DSKT2.DARAM2 = "EXTMEM_HEAP";

DSKT2.SARAM0 = "EXTMEM_HEAP";
DSKT2.SARAM1 = "EXTMEM_HEAP";
DSKT2.SARAM2 = "EXTMEM_HEAP";

DSKT2.ESDATA = "EXTMEM_HEAP";
DSKT2.IPROG = "EXTMEM_HEAP";
DSKT2.EPROG = "EXTMEM_HEAP";

DSKT2.DSKT2_HEAP = "EXTMEM_HEAP";

// Configure RMAN
xdc.loadPackage('ti.sdo.fc.rman').profile = "debug";
var RMAN = xdc.useModule('ti.sdo.fc.rman.RMAN');

if (Program.build.target.os != undefined) {
    // todo: this seems wierd - we don't use dskt2, but set the alloc and
    // free functions to dskt2 functions.
    RMAN.useDSKT2 = false;
    RMAN.persistentAllocFxn = "DSKT2_allocPersistent" ;
    RMAN.persistentFreeFxn = "DSKT2_freePersistent" ;
}

if (Program.build.target.os == undefined) {
    /* Assume this is a BIOS OS */

    /* ======== Using the Task Module ======== */
    var Task = xdc.useModule('ti.sysbios.knl.Task');

    // Set number of Task priority levels
    Task.numPriorities = 16;
    Task.idleTaskStackSize = 2048;

    // Create a Task Instance and manipulate Instance parameters
    var tskParams = new Task.Params();
    //tskParams.arg0 = 1; // Not using args, but leave here for an example
    //tskParams.arg1 = 2;
    tskParams.priority = 15;
    tskParams.stack = null;
    tskParams.stackSize = 0x2000;

    // Add instance of Task running smain().
    task0 = Task.create('&smain', tskParams);
}

var Main = xdc.useModule('xdc.runtime.Main');
Diags.setMaskMeta("xdc.runtime.Main", Diags.ALL, Diags.RUNTIME_ON);

Diags.setMaskMeta("xdc.runtime.Registry", Diags.ALL, Diags.RUNTIME_OFF);
/*
 *  @(#) ti.sdo.fc.rman.examples.bufres; 1, 0, 0,4; 2-22-2012 18:07:29; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

