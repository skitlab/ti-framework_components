/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
/*
 *  ======== common.cfg ========
 */

var internalMemorySegment;      //Variable to identify internal memory section
var Program = xdc.useModule('xdc.cfg.Program');
xdc.global.chipType = Program.platformName;


/* Set up to use stdio */
var System = xdc.useModule('xdc.runtime.System');
System.SupportProxy = xdc.useModule('xdc.runtime.SysStd');;


xdc.useModule('ti.sysbios.xdcruntime.Settings');

/* Name of internal memory in Platform.xdc file */
externalMemorySegment = Program.platform.dataMemory;

var intHeapSize = 0x58000;   // Size to make internal heap
var extHeapSize = 0x10000;  // Total size to make external heap

if (chipType.match(/6472/)) {
    internalMemorySegment = "LL2RAM";
    externalMemorySegment = "DDR2";
}
else if (chipType.match(/6474/)) {
    internalMemorySegment = "L2RAM";
    externalMemorySegment = "DDR2";
}
else if (chipType.match(/6608|6616|6678/)) {
    internalMemorySegment = "L2SRAM";
    if (chipType.match(/6678/)) {
        externalMemorySegment = "DDR3";
    }
    else {
        externalMemorySegment = "DDR2";
    }
}
else { 
    throw ("Unsupported Multicore device " + chipType); 
}

/* Configure a couple of heaps */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

var heapMemParams = new HeapMem.Params();
heapMemParams.size = extHeapSize;
heapMemParams.sectionName = ".EXTMEM_HEAP";
Program.global["EXTMEM_HEAP"] = HeapMem.create(heapMemParams);
Program.sectMap[".EXTMEM_HEAP"] = externalMemorySegment;
 
var heapMemParams = new HeapMem.Params();
heapMemParams.size = intHeapSize;
heapMemParams.sectionName = ".INTMEM_HEAP";
Program.global.INTMEM_HEAP = HeapMem.create(heapMemParams);
    
/* Each core has its own internal memory, so no overlap issues */
Program.sectMap[".INTMEM_HEAP"] = internalMemorySegment;
Program.sectMap[".text"] = externalMemorySegment; 
Program.sectMap[".const"] = externalMemorySegment; 

/* Override datamemory with internal memory */
//Program.platform.dataMemory = internalMemorySegment;

/* Configure DSKT2 heaps and scratch */
var DSKT2 = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
DSKT2.ALLOW_EXTERNAL_SCRATCH = false;

DSKT2.DARAM0 = "INTMEM_HEAP";
DSKT2.DARAM1 = "INTMEM_HEAP";
DSKT2.DARAM2 = "INTMEM_HEAP";

DSKT2.SARAM0 = "INTMEM_HEAP";
DSKT2.SARAM1 = "INTMEM_HEAP";
DSKT2.SARAM2 = "INTMEM_HEAP";

DSKT2.ESDATA = "INTMEM_HEAP"; 
DSKT2.IPROG = "INTMEM_HEAP";
DSKT2.EPROG = "INTMEM_HEAP";

DSKT2.DSKT2_HEAP = "INTMEM_HEAP";

/* Assume this is a BIOS OS */

/* ======== Using the Task Module ======== */
var Task = xdc.useModule('ti.sysbios.knl.Task');

// Set number of Task priority levels
Task.numPriorities = 16;
Task.idleTaskStackSize = 2048;

// Create a Task Instance and manipulate Instance parameters
var tskParams = new Task.Params();
//tskParams.arg0 = 1; // Not using args, but leave here for an example
//tskParams.arg1 = 2;
tskParams.priority = 15;
tskParams.stack = null;
tskParams.stackSize = 0x800;

// Add instance of Task running smain().
task0 = Task.create('&smain', tskParams);
/*
 *  @(#) ti.sdo.fc.rman.examples.dmaXferScratch; 1, 0, 0,4; 2-22-2012 18:07:47; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

