/* 
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

/*
 *  ======== package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');

/* lib/ is a generated directory that 'xdc clean' should remove */
Pkg.generatedFiles.$add("lib/");

/*
 * This package distributes its sources in the default release.  This is to
 * enable better understanding by the customer/field, as well as enable
 * modification and profiling techniques in the field.
 */
Pkg.attrs.exportSrc = true;

// check if profile is specified in XDCARGS. 'arguments' is XDCARGS
// eg, XDCARGS="... profile=debug ..."
var cmdProf = (" " + arguments.join(" ") + " ").match(/ profile=([^ ]+) /);
cmdProf = cmdProf != null ? cmdProf[1] : null;

if (cmdProf != null) {
    print("Building for " + cmdProf + " profile specified on command line...");
}

// List of preferred profiles to build for.
var profileAry = ["debug", "release"];

var LIBBASE = "dman3";

var srcFiles =      ["dman3", "dman3_initImpl", "dman3_init", "dman3_api",
        "rmm"];

var srcFilesExternalRM = ["dman3", "dman3_externalRM_initImpl", "dman3_init",
        "dman3_externalRM_api", "rmm"];

/*
 * List of objects to be included for RTSC based consumers of FC/DMAN3.
 * This is the same list as above, except for the exclusion of dman3_init.
 * DMAN3 module supplies the DMAN3_init by synthesizing the function based on
 * module configuration using a template.
 */
var srcFilesCfg = ["dman3", "dman3_initImpl", "dman3_api", "rmm"];
var srcFilesExternalRMCfg = ["dman3", "dman3_externalRM_initImpl",
        "dman3_externalRM_api", "rmm"];

// list of libraries to build
var libArray = new Array();

// DSP dma copy
libArray.push({name: "dman3",
        isas: ["64P", "64T", "674"],
        sources: srcFiles,
});

// DSP dma copy with XDC configuration
libArray.push({name: "dman3Cfg",
        isas: ["64P", "64T", "674"],
        sources: srcFilesCfg,
});

// DSP cpu copy
libArray.push({name: "dman3cpu",
        isas: ["64P", "64T"],
        sources: srcFiles,
        libAttrs: {
            defs: " -D_DMAN3_CPUCOPY_ ",
}});

// DSP dma copy with external resource manager
libArray.push({name: "dman3RM",
        isas: ["64P", "64T"],
        sources: srcFilesExternalRM,
});

// DSP dma copy with external resource manager and XDC configuration
libArray.push({name: "dman3RMCfg",
        isas: ["64P", "64T"],
        sources: srcFilesExternalRMCfg,
});


// Linux Arm, dma copy
libArray.push({name: "dman3",
        isas: ["v5T"],
        sources: srcFiles,
        libAttrs: {
            // TODO: add -D_MULTI_PROCESS_ when GateMP is available.
            defs: " -D_LINUX_ ", // "-D_MULTI_PROCESS_ ",
}});

// Linux Arm, dma copy (xdc configurable)
libArray.push({name: "dman3Cfg",
        isas: ["v5T"],
        sources: srcFilesCfg,
        libAttrs: {
            // TODO: add -D_MULTI_PROCESS_ when GateMP is available.
            defs: " -D_LINUX_ ", // "-D_MULTI_PROCESS_ ",
}});

// Linux Arm, PC cpu copy (non-xdc configurable)
libArray.push({name: "dman3cpu",
        isas: ["v5T", "i686" /* i686 = PC */],
        sources: srcFiles,
        libAttrs: {
            // TODO: add -D_MULTI_PROCESS_ when GateMP is available.
            defs: " -D_DMAN3_CPUCOPY_ -D_LINUX_ ", // "-D_MULTI_PROCESS_ ",
}});

// Linux Arm, PC cpu copy (xdc configurable)
libArray.push({name: "dman3cpuCfg",
        isas: ["v5T", "i686" /* i686 = PC */],
        sources: srcFilesCfg,
        libAttrs: {
            // TODO: add -D_MULTI_PROCESS_ when GateMP is available.
            defs: " -D_DMAN3_CPUCOPY_ -D_LINUX_", // "-D_MULTI_PROCESS_ ",
}});

Pkg.otherFiles = [
    "dman3.h",
    "dman3.tci",
    "dman3_c.tpl",
    "dman3_cmd.tpl",
    "dman3_impl.h",
    "rmm.h",
    "_rmm.h",
    "dman3_externalRM_impl.h",
    "package.bld",
    "simple_GCArmv5T.mak"
];


// ==== loop over array of libraries ====
for (var i = 0; i < libArray.length; i++) {
    var lib = libArray[i];

    // ==== loop over all targets in build array ====
    for (var j = 0; j < Build.targets.length; j++) {
        var targ = Build.targets[j];

        // skip target if not supported by current library
        if ("isas" in lib) {
            var skipTarget = true;
            var targIsaChain = ":" + targ.getISAChain().join(":") + ":";
            for (var k = 0; k < lib.isas.length; k++) {
                if (targIsaChain.match(":" + lib.isas[k] + ":")) {
                    skipTarget = false;
                    break;
                }
            }
            if (skipTarget) continue;
        }

        // ==== loop over all profiles ====
        for (var profile in targ.profiles) {
            if (cmdProf != null) {
                // skip profile if different than specified on command line
                if (profile != cmdProf) {
                    continue;
                }
            }
            else {
                // skip profile if different from package preference
                if (!(":" + profileAry.join(":")+":").match(":"+ profile+":")){
                    continue;
                }
            }

            // name = lib/profile/name.a+suffix
            var name = "lib/" + profile + "/" + lib.name;

            // pass along library attributes specified in library array
            var libAttrs = "libAttrs" in lib ? lib.libAttrs : {};

            // must set profile explicitly
            libAttrs.profile = profile;

            // build the library
            var library = Pkg.addLibrary(name, targ, libAttrs);

            /* add the source files */
            library.addObjects(lib.sources);
        }
    }
}
/*
 *  @(#) ti.sdo.fc.dman3; 1, 0, 4,4; 2-22-2012 18:03:20; /db/atree/library/trees/fc/fc-q07/src/ xlibrary

 */

